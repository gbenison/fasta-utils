/*
 * GCB 8mar11
 *
 * Stack multiple sequences in a FASTA input file
 * i.e. juxtapose sequences for visual comparison
 */

%x COMMENT
%x SEQUENCE

%{
  #include <glib.h>

  GList *comments = NULL;
  char *comment_buffer, *comment_ptr;
  static const int comment_max_length = 16;
  #define PUSH_COMMENT {\
      if ((comment_ptr - comment_buffer) < comment_max_length) \
        {*comment_ptr = *yytext; ++comment_ptr;}}

  static void comment_init()
  {
     comment_buffer = calloc(comment_max_length, 1);
     comment_ptr = comment_buffer;
  }

  GList *sequences = NULL;
  GList *buffer = NULL;
  #define PUSH {buffer = g_list_prepend(buffer, (gpointer)(int)(*yytext));}

  static const int column_width = 40;
  static void report_sequence()
  {	 
     sequences = g_list_append(sequences, buffer);
     comments = g_list_append(comments, comment_buffer);
     comment_init();
     buffer = NULL;
  }

%}

%%

<INITIAL>[;>]	    {comment_init(); BEGIN(COMMENT);}
<COMMENT>\n	    {BEGIN(INITIAL);}
<COMMENT>.          {PUSH_COMMENT;}
<INITIAL>[AGTC]|-   {BEGIN(SEQUENCE); unput(*yytext); }
<SEQUENCE>[AGTC]|-  {PUSH;}
<SEQUENCE>[;>]	    {report_sequence(); BEGIN(COMMENT);}
<SEQUENCE><<EOF>>   {report_sequence(); yyterminate();}
<*>.|\n 	    {/* default rule - gobble */}

%%

int
main(int argc, char *argv[])
{
	yylex();
	int continuing = 1;
	int total_count = 1;

        GList *sequence, *comment;
	/* flip sequences back to correct order */
	for (sequence = sequences; sequence != NULL; sequence=sequence->next)
	   sequence->data = g_list_reverse((GList*)sequence->data);

	while (continuing)
	{
	  continuing = 0;

	  for (sequence = sequences, comment = comments;
	       sequence != NULL;
	       sequence = sequence->next, comment = comment->next)
	  {
		char *comment_str = (char*)comment->data;
		printf("%s", comment_str);
		int i;
		for (i = 0; i < comment_max_length + 3 - strlen(comment_str); ++i)
		  putchar('.');
		putchar(' ');

		/* FIXME write sequences */
		for (i = 0;
                     (i < column_width) && (sequence->data != NULL);
                     ++i, sequence->data = ((GList*)(sequence->data))->next)
		  putchar((char)(int)(((GList*)(sequence->data))->data)), continuing = 1;
		if (sequence == sequences)
                  printf("  %d", total_count + i);
		printf("\n");
	  }
	  total_count += column_width;
	  printf("\n");
	}
}

