/*
 * Lexer core reads FASTA input and passes it to handlers.
 *
 * Copyright (C) 2011, Greg Benison
 * 
 *  This program is free software; you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation; either version 3 of the License, or
 *  (at your option) any later version.
 * 
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 * 
 *  You should have received a copy of the GNU General Public License
 *  along with this program; if not, write to the Free Software
 *  Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 *
 */

%{
   #include <getopt.h>

   extern const struct option my_options[];
   extern char* my_optstring;

   extern void process_args(int, int, char*[]);
   extern void process_option(int, char*);
   extern void post_process(void);

   extern void init_sequence(void);
   extern void handle_sequence(char);
   extern void terminate_sequence(void);

   extern void init_comment(void);
   extern void handle_comment(char);
   extern void terminate_comment(void);
%}

%x COMMENT
%x SEQUENCE

%%

<INITIAL>[;>]     { init_comment(); BEGIN(COMMENT); }
<COMMENT>.        { handle_comment(*yytext); }
<COMMENT>\n       { terminate_comment(); BEGIN(INITIAL); }
<INITIAL>[A-Z]|-  { BEGIN(SEQUENCE); init_sequence(); unput(*yytext); }
<SEQUENCE>[A-Z]|- { handle_sequence(*yytext); }
<SEQUENCE>[;>]    { terminate_sequence(); init_comment(); BEGIN(COMMENT); }
<SEQUENCE><<EOF>> { terminate_sequence(); yyterminate(); }
<*>.|\n           { /* default rule - gobble */ }

%%

int
main(int argc, char *argv[])
{
   while (1)
   {
      int option_idx = 0;
      int code = 
        getopt_long(argc, argv, my_optstring, my_options, &option_idx);
      if (code == -1) break;
      else process_option(code, optarg);
   } 
  
   process_args(optind, argc, argv);
   yylex();
   post_process();

   return 0;
}